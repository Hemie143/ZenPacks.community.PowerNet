name: ZenPacks.community.PowerNet

class_relationships:
  - PowerNetDevice 1:MC PowerNetInput
  - PowerNetDevice 1:MC PowerNetOutput
  - PowerNetInput 1:MC PowerNetInputPhaseNeutral
  - PowerNetInput 1:MC PowerNetInputPhasePhase
  - PowerNetDevice 1:MC PowerNetOutputPhaseNeutral
  - PowerNetDevice 1:MC PowerNetOutputPhasePhase

classes:
  PowerNetDevice:
    base: [zenpacklib.Device]
    label: PowerNet UPS Device
    monitoring_templates: [PowerNetDevice]
    properties:
      model:
        type: string
        label: Model
      numBatteryPacks:
        type: string
        label: Number of battery packs
      numBadBatteryPacks:
        type: string
        label: Number of bad battery packs
      basicOutputStatus:
        type: string
        label: Output status

  PowerNetInput:
    base: [zenpacklib.Component]
    label: Input
    monitoring_templates: [PowerNetInput]
    properties:
      index:
        label: Index
      numPhases:
        label: Phases
      orientation:
        label: Voltage orientation
      inputType:
        label: Input type

  PowerNetInputPhaseNeutral:
    base: [zenpacklib.Component]
    label: Input Phase-to-Neutral
    monitoring_templates: [PowerNetInputPhaseNeutral]
    properties:
      inputIndex:
        label: Input Index
      index:
        label: Index

  PowerNetInputPhasePhase:
    base: [zenpacklib.Component]
    label: Input Phase-to-Phase
    monitoring_templates: [PowerNetInputPhasePhase]
    properties:
      inputIndex:
        label: Input Index
      index:
        label: Index

  PowerNetOutput:
    base: [zenpacklib.Component]
    label: Output
    monitoring_templates: [PowerNetOutput]
    properties:
      index:
        label: Index
      numPhases:
        label: Phases
      orientation:
        label: Voltage orientation

  PowerNetOutputPhaseNeutral:
    base: [zenpacklib.Component]
    label: Output Phase-to-Neutral
    monitoring_templates: [PowerNetOutputPhaseNeutral]
    properties:
      outputIndex:
        label: Output Index
      index:
        label: Index

  PowerNetOutputPhasePhase:
    base: [zenpacklib.Component]
    label: Output Phase-to-Phase
    monitoring_templates: [PowerNetOutputPhasePhase]
    properties:
      outputIndex:
        label: Output Index
      index:
        label: Index

device_classes:
  /Power/UPS/PowerNet:
    zProperties:
      zPythonClass: ZenPacks.community.PowerNet.PowerNetDevice
      zSnmpMonitorIgnore: false
      zCollectorPlugins:
        - zenoss.snmp.NewDeviceMap
        - zenoss.snmp.DeviceMap
        - zenoss.snmp.SnmpV3EngineIdMap
        - zenoss.snmp.InterfaceMap
        - community.snmp.PowerNet
      zDeviceTemplates:
        - Device
        - PowerNetDevice

    templates:
      PowerNetDevice:
        targetPythonClass: ZenPacks.community.PowerNet.PowerNetDevice
        datasources:
          ups:
            type: Python
            plugin_classname: ZenPacks.community.PowerNet.dsplugins.PowerNetDevice.PowerNetDevice
            datapoints:
                batteryStatus:
                  rrdtype: GAUGE
                batteryCapacity:
                  rrdtype: GAUGE
                batteryRunTimeRemaining:
                  rrdtype: GAUGE
                upsOutputLoad:
                  rrdtype: GAUGE
                upsAdvBatteryNominalVoltage:
                  rrdtype: GAUGE
                upsAdvBatteryActualVoltage:
                  rrdtype: GAUGE
                upsAdvBatteryCurrent:
                  rrdtype: GAUGE
                upsAdvBatteryTemperature:
                  rrdtype: GAUGE
                upsAdvOutputNominalFrequency:
                  rrdtype: GAUGE
                upsPhaseOutputFrequency:
                  rrdtype: GAUGE
                upsAdvOutputActivePower:
                  rrdtype: GAUGE
                upsAdvOutputApparentPower:
                  rrdtype: GAUGE
        graphs:
          Battery Current:
            units: Ampere
            graphpoints:
              Current:
                dpName: ups_upsAdvBatteryCurrent
          Battery RunTime remaining:
            units: minutes
            miny: 0
            graphpoints:
              RunTimeRemaining:
                dpName: ups_batteryRunTimeRemaining
                lineType: AREA
          Battery Temperature:
            units:  "\xB0C"
            graphpoints:
              Temperature:
                dpName: ups_upsAdvBatteryTemperature
          Battery Voltage:
            units: Volt
            graphpoints:
              Nominal voltage:
                dpName: ups_upsAdvBatteryNominalVoltage
                sequence: 1
              Actual voltage:
                dpName: ups_upsAdvBatteryActualVoltage
                sequence: 2
          Output Frequency:
            units: Hz
            graphpoints:
              Output Frequency:
                dpName: ups_upsPhaseOutputFrequency
                sequence: 1
              Output Nominal Frequency:
                dpName: ups_upsAdvOutputNominalFrequency
                sequence: 2
          Output Power:
            units: Watt
            graphpoints:
              Active Power:
                dpName: ups_upsAdvOutputActivePower
                sequence: 1
              Apparent Power:
                dpName: ups_upsAdvOutputApparentPower
                sequence: 2
          UPS Capacity:
            miny: 0
            maxy: 100
            units: percent
            graphpoints:
              Battery Remaining Capacity:
                dpName: ups_batteryCapacity
                lineType: AREA
                sequence: 1
              Output Load:
                dpName: ups_upsOutputLoad
                lineType: AREA
                sequence: 2

      PowerNetInput:
        targetPythonClass: ZenPacks.community.PowerNet.PowerNetInput
        datasources:
          input:
            type: Python
            plugin_classname: ZenPacks.community.PowerNet.dsplugins.PowerNetInput.PowerNetInput
            datapoints:
              nominal_voltage:
                rrdtype: GAUGE
              nominal_frequency:
                rrdtype: GAUGE
              frequency:
                rrdtype: GAUGE
        graphs:
          Input Nominal Voltage:
            miny: 0
            units: Volt
            graphpoints:
              Voltage:
                dpName: input_nominal_voltage
          Input Frequency:
            miny: 0
            units: Hz
            graphpoints:
              Frequency:
                dpName: input_frequency
              Nominal Frequency:
                dpName: input_nominal_frequency

      PowerNetInputPhaseNeutral:
        targetPythonClass: ZenPacks.community.PowerNet.PowerNetInputPhaseNeutral
        datasources:
          inputpn:
            type: Python
            plugin_classname: ZenPacks.community.PowerNet.dsplugins.PowerNetInput.PowerNetInputPhaseNeutral
            datapoints:
              voltage:
                rrdtype: GAUGE
              current:
                rrdtype: GAUGE
        graphs:
          Input Voltage:
            miny: 0
            units: Volt
            graphpoints:
              Voltage:
                dpName: inputpn_voltage
                lineType: AREA
                sequence: 1
          Input Current:
            miny: 0
            units: Ampere
            graphpoints:
              Current:
                dpName: inputpn_current
                lineType: AREA
                sequence: 1

      PowerNetInputPhasePhase:
        targetPythonClass: ZenPacks.community.PowerNet.PowerNetInputPhasePhase
        datasources:
          inputpp:
            type: Python
            plugin_classname: ZenPacks.community.PowerNet.dsplugins.PowerNetInput.PowerNetInputPhasePhase
            datapoints:
              voltage:
                rrdtype: GAUGE
              current:
                rrdtype: GAUGE
        graphs:
          Input Voltage:
            miny: 0
            units: Volt
            graphpoints:
              Voltage:
                dpName: inputpp_voltage
                lineType: AREA
                sequence: 1

      PowerNetOutputPhaseNeutral:
        targetPythonClass: ZenPacks.community.PowerNet.PowerNetOutputPhaseNeutral
        datasources:
          outputpn:
            type: Python
            plugin_classname: ZenPacks.community.PowerNet.dsplugins.PowerNetOutput.PowerNetOutputPhaseNeutral
            datapoints:
              voltage:
                rrdtype: GAUGE
              current:
                rrdtype: GAUGE
              load:
                rrdtype: GAUGE
              loadperc:
                rrdtype: GAUGE
              power:
                rrdtype: GAUGE
        graphs:
          Output Voltage:
            miny: 0
            units: Volt
            graphpoints:
              Voltage:
                dpName: outputpn_voltage
                lineType: AREA
                sequence: 1
          Output Current:
            miny: 0
            units: Ampere
            graphpoints:
              Current:
                dpName: outputpn_current
                lineType: AREA
          Output Load Percentage:
            miny: 0
            units: percent
            graphpoints:
              Load Percentage:
                dpName: outputpn_loadperc
                lineType: AREA
                sequence: 1
          Output Power:
            miny: 0
            units: Watts
            graphpoints:
              Active Power:
                dpName: outputpn_power
                lineType: AREA
                sequence: 1
              Apparent Power:
                dpName: outputpn_load
                lineType: AREA
                sequence: 2

      PowerNetOutputPhasePhase:
        targetPythonClass: ZenPacks.community.PowerNet.PowerNetOutputPhasePhase
        datasources:
          outputpp:
            type: Python
            plugin_classname: ZenPacks.community.PowerNet.dsplugins.PowerNetOutput.PowerNetOutputPhasePhase
            datapoints:
              voltage:
                rrdtype: GAUGE
              current:
                rrdtype: GAUGE
        graphs:
          Output Voltage:
            miny: 0
            units: Volt
            graphpoints:
              Voltage:
                dpName: outputpp_voltage
                lineType: AREA
                sequence: 1

